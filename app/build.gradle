plugins {
    id 'com.android.application'
    id 'jacoco'
}


android {
    compileSdk 29

    defaultConfig {
        applicationId "com.developerdiindy.shopit"
        minSdk 21
        targetSdk 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
    dataBinding {
        enabled = true
    }

    testOptions {
        unitTests.all {
            animationsDisabled = true
            useJUnitPlatform()
            finalizedBy jacocoTestReport
        }
    }
}


dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.0.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0'


    testImplementation('org.junit.jupiter:junit-jupiter:5.4.0')
    androidTestImplementation 'org.testng:testng:7.4.0'

    // Espresso
    def androidx_test_espresso = "3.4.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidx_test_espresso"

    // androidx.test
    def androidx_test = "1.1.3"
    androidTestImplementation "androidx.test:runner:$androidx_test"
    androidTestImplementation "androidx.test:core:$androidx_test"
    androidTestImplementation "androidx.test.ext:junit-ktx:$androidx_test"
    androidTestImplementation "androidx.test.ext:junit:$androidx_test"

    // additional androidx.test
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestUtil 'androidx.test:orchestrator:1.4.1'
    androidTestImplementation 'androidx.test:runner:1.4.0'
}


// Generate code coverage reports ... run with jacoco
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }

    def fileFilter = ['androidx/**/*.*',
                      '**/view/*.*',
                      '**/data/*.*',
                      '**/data/model/*.*',
                      '**/generated/callback/*.*',
                      '**/lambda$*.class',
                      '**/lambda.class',
                      '**/*lambda.class',
                      '**/*lambda*.class']

    def debugTree = fileTree(dir:
            "${buildDir}/intermediates/javac/debug/classes",
            excludes: fileFilter
    )

    def mainSrc = "/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))

    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "${buildDir}", includes:[
            "/jacoco/testDebugUnitTest.exec","outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"]))
}
